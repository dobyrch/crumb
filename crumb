#!/usr/bin/env python3
import os
import re
import sys
from argparse import ArgumentParser
from collections import Counter
from subprocess import run, PIPE


def main(args):
    cmdline = ['./crumb_dump']

    if args.recursive:
        cmdline.append('-r')

    for path in args.paths:
        cmdline.append(path)

    process = run(cmdline, stdout=PIPE, stderr=PIPE)
    stdout = process.stdout.split(b'\0')
    stderr = process.stderr.split(b'\n')
    # Discard final (empty) element
    stdout.pop()
    stderr.pop()

    if not process.stdout:
        if process.stderr:
            fail(stderr)
        else:
            sys.exit('No crumbs found')

    files = stdout[0::2]
    exes = stdout[1::2]
    crumbs = sorted(zip(exes, files))

    if args.count:
        counts = Counter(exes).most_common()
        pad = len(str(counts[0][1]))

        for exe, count in counts:
            if not exe:
                exe = b'(unknown)'
            write(str(count).rjust(pad, ' '), exe)
    else:
        pad = len(max(exes, key=len))

        for exe, f in crumbs:
            if not exe:
                exe = b'(unknown)'
            write(exe.ljust(pad, b' '), f, sep='    ')

    if process.stderr:
        fail(stderr)


def fail(stderr):
    for err in stderr:
        write(sys.argv[0], ': ', err, sep='')
    sys.exit(2)


def write(*args, sep=b' ', end=b'\n'):
    def to_bytes(x):
        if type(x) is bytes:
            return x
        return x.encode(sys.stdout.encoding)


    args = [ to_bytes(x) for x in args ]
    sep = to_bytes(sep)
    end = to_bytes(end)

    for x in args[:-1]:
        sys.stdout.buffer.write(x)
        sys.stdout.buffer.write(sep)

    sys.stdout.buffer.write(args[-1])
    sys.stdout.buffer.write(end)


if __name__ == '__main__':
    parser = ArgumentParser()

    parser.add_argument('--recursive', action='store_true')
    parser.add_argument('--count', action='store_true')
    parser.add_argument('--package', action='store_true')

    parser.add_argument('--installed', action='store_true')
    parser.add_argument('--available', action='store_true')
    parser.add_argument('--missing', action='store_true')

    parser.add_argument('paths', metavar='FILE', nargs='+')

    args = parser.parse_args()

    main(args)
